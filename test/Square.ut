/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */
/*global document:writable*/

/**
 * Unit tests for Square class
 */
describe("Square class", () => {

  /* global Platform, Square, Tile */
  const TS = require("./TestSupport.js");
  after(() => TS.after());
  before(required => {
    TS.before({      
      Square: "game/Square",
      Tile: "game/Tile"
    }, required);
  });

  it('construct', () => {
    let sq = new Square({type:'q', base: 'base', col: 56, row: 42});
    assert.equal(sq.letterScoreMultiplier, 4);
    assert.equal(typeof sq.wordScoreMultiplier, "undefined");
    assert(!sq.tile);
    assert(!sq.tileLocked);
    assert(!sq.isLocked());
    assert(sq.isEmpty());
    let tile = new Tile({
      letter:'S', isBlank:false, score:1, col: 7, row: 7});
    sq.placeTile(tile);
    assert.strictEqual(sq.tile, tile);
    assert(!sq.tileLocked);
    assert(!sq.isEmpty());
    assert.equal(tile.col, sq.col);
    assert.equal(tile.row, sq.row);

    sq.unplaceTile();
    assert(!sq.tile);
    assert(!sq.tileLocked);
    assert(sq.isEmpty());

    sq.placeTile(tile, true);
    assert.strictEqual(sq.tile, tile);
    assert(sq.tileLocked);
    assert(sq.isLocked());
    assert(!sq.isEmpty());
    assert.equal(tile.col, sq.col);
    assert.equal(tile.row, sq.row);
    assert.equal(typeof new Square({type: 'Q', base: "base"}).letterScoreMultiplier, "undefined");
    assert.equal(new Square({type:'Q', base: "base"}).wordScoreMultiplier, 4);
    assert.equal(new Square({type:'t', base: "base"}).letterScoreMultiplier, 3);
    assert.equal(typeof new Square({type:'t', base: "base"}).wordScoreMultiplier, "undefined");
    assert.equal(typeof new Square({type:'T', base: "base"}).letterScoreMultiplier, "undefined");
    assert.equal(new Square({type:'T', base: "base"}).wordScoreMultiplier, 3);
    assert.equal(new Square({type:'d', base: "base"}).letterScoreMultiplier, 2);
    assert.equal(typeof new Square({type:'d', base: "base"}).wordScoreMultiplier, "undefined");
    assert.equal(typeof new Square({type:'D', base: "base"}).letterScoreMultiplier, "undefined");
    assert.equal(new Square({type:'D', base: "base"}).wordScoreMultiplier, 2);
    assert.equal(typeof new Square({type:'M', base: "base"}).letterScoreMultiplier, "undefined");
    assert.equal(new Square({type:'M', base: "base"}).wordScoreMultiplier, 2);
  });
});

