/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */
/*global document:writable*/

/**
 * Unit tests for Square class
 */
describe("browser/Square mixin", () => {

  /* global Platform, Square, Tile */
  const TS = require("./TestSupport.js");
  after(() => TS.after());
  before(required => {
    requirejs.isBrowser = true; // muddy boots
    return TS.before({
        Square: "game/Square",
        Tile: "game/Tile",
        jQueryUI: "jquery-ui"
      }, required);
  });

  function UNit() {}

  it('$ui', () => {
    let sq = new Square({type: 'q', base: "base", col: 56, row: 42});
    let $dact = $("<div></div>").append(sq.$td());
    $("body").append($dact);
    assert.equal(
      $dact.html(),
      '<td class="square-q ui-droppable" id="base_56x42"><div class="underlay" data-long="QUAD LETTER SCORE" data-short="QL"></div></td>');
    sq = new Square({type: '_', base: "base", col: 56});
    assert.equal(sq.$td().html(), '');
    $("body").empty();
  });

  it("empty", () => {
    let sq = new Square({type: 'q', base: "base", col: 56, row: 42});
    sq.setUnderlay('T');
    let $dact = $("<div></div>").append(sq.$td());
    $("body").append($dact);
    assert.equal(
      $dact.html(),
      '<td class="square-q ui-droppable" id="base_56x42"><div class="underlay">T</div></td>');
    $("body").empty();
  });
  
  it("occupied unlocked", () => {
    let sq = new Square({type: 'q', base: 'surface', col: 56, row: 42});
    sq.setUnderlay('T');
    let tile = new Tile({ letter:'S', isBlank:false });
    sq.placeTile(tile);
    assert(!tile.isLocked);
    sq.select(true);
    $("body").append($("<div id='act'></div>").append(sq.$td()));
    const $glyph = $('<div class="glyph"><span class="letter">S</span><span class="score">0</span></div>');
    const $tile = $('<div class="Tile ui-draggable ui-draggable-handle unlocked-tile"></div>').append($glyph);
    const $underlay = $('<div class="underlay">T</div>');
    const $td = $('<td class="square-q" id="surface_56x42"></td>')
          .append($underlay).append($tile);
    $("body").append($('<div id="exp"></div>').append($td));

    const $act = $("#act").children().first();
    const $exp = $("#exp").children().first();
    assert($act[0].isEqualNode($exp[0]),
           "\n\t" + $("#act").html() + "\n\t" + $("#exp").html());
    $("body").empty();
  });

  it("occupied locked", () => {
    let sq = new Square({type:'_', base: 'surface', col:56, row:42});
    let $dact = $("<div></div>").append(sq.$td());
    $("body").append($dact);
    assert(!sq.isLocked());
    let tile = new Tile({ letter:'W', isBlank:false });
    sq.placeTile(tile, true);
    assert(sq.isLocked());
    // No handler in place to deal with this, muddy boots
    sq.$placeTile();

    const $glyph = $('<div class="glyph"><span class="letter">W</span><span class="score">0</span></div>');
    const $tile = $('<div class="Tile locked-tile"></div>').append($glyph);
    const $td = $('<td class="square-_" id="surface_56x42"></td>').append($tile);
    const $dexp = $('<div></div>').append($td);
    
    assert($dact[0].isEqualNode($dexp[0]),
           "\n" + $dact.html() + "\n" + $dexp.html());

    sq.$unplaceTile(sq.unplaceTile());

    $td.addClass("ui-droppable");
    $tile.remove();
    assert($dact[0].isEqualNode($dexp[0]),
           "\n" + $dact.html() + "\n\n" + $dexp.html());
    assert(sq.isEmpty());
    assert(!sq.isLocked());
    $("body").empty();
  });

  // Checked dispatched events
  it("place-unplace", () => {
    $(document)
    .on("TilePlaced",
        (e, square) => {
          square.$placeTile();
        })
    
    .on("TileUnplaced",
        (e, square, tile) => {
          square.$unplaceTile(tile);
        });

    let sq = new Square({type:'_', base: 'surface', col:56, row:42});
    let $dact = $("<div></div>").append(sq.$td());
    $("body").append($dact);
    assert(!sq.isLocked());
    let tile = new Tile({ letter:'W', isBlank:false });
    sq.placeTile(tile);

    const $glyph = $('<div class="glyph"><span class="letter">W</span><span class="score">0</span></div>');
    const $tile = $('<div class="Tile ui-draggable ui-draggable-handle unlocked-tile"></div>').append($glyph);
    const $td = $('<td class="square-_" id="surface_56x42"></td>').append($tile);
    const $dexp = $('<div></div>').append($td);
    
    assert($dact[0].isEqualNode($dexp[0]),
           "\n" + $dact.html() + "\n" + $dexp.html());

    sq.unplaceTile();

    $td.addClass("ui-droppable");
    $tile.remove();
    assert($dact[0].isEqualNode($dexp[0]),
           "\n" + $dact.html() + "\n\n" + $dexp.html());
    assert(sq.isEmpty());
    assert(!sq.isLocked());
    $("body").empty();
  });
});

