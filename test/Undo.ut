/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */

/**
 * Unit tests for undo.
 */

describe("Undo", () => {
	
	const TS = require("./TestSupport.js");
	before(required => TS.depend(required, {
    Fridge: "common/Fridge",

		Tile: "game/Tile",
		LetterBag: "game/LetterBag",
		Player: "game/Player",
	  Game: "game/Game",
	  Undo: "game/Undo",
		
		Move: "game/Move",
		Turn: "game/Turn",
		Types: "game/Types"
    }));

  function assertGameEqual(actual, expected, noTurns) {
    const elb = expected.letterBag;
    expected.letterBag = undefined;

    const alb = actual.letterBag;
    actual.letterBag = undefined;

    assert.deepEqual(alb.tiles.sort(Tile.cmp),
                     elb.tiles.sort(Tile.cmp));

    const racks = [];
    for (let i = 0; i < actual.players.length; i++) {
      let pa = actual.players[i];
      let pe = expected.getPlayerWithKey(pa.key);
      assert.deepEqual(pa.rack.letters().sort(),
                       pe.rack.letters().sort());
      racks.push({key: pa.key, pa: pa.rack, pe: pe.rack});
      pa.rack = undefined;
      pe.rack = undefined;
    }

    let eturns, aturns;
    if (noTurns) {
      eturns = expected.turns;
      aturns = actual.turns;
      expected.turns = undefined;
      actual.turns = undefined;
    }
    assert.deepEqual(actual, expected);
    if (noTurns) {
      expected.turns = eturns;
      actual.turns = aturns;
    }

    expected.letterBag = elb;
    actual.letterBag = alb;

    for (let r of racks) {
      actual.getPlayerWithKey(r.key).rack = r.pa;
      expected.getPlayerWithKey(r.key).rack = r.pe;
    }
  }

  function UNit() {}
  
	it("unswap", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			//_debug: console.debug,
			noPlayerShuffle: true
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const socket1 = new TestSocket();
		socket1
    .on(Notify.TURN, turn => {
      socket1.done();
		})
		.on("*", (data, event) => {});

    let A, B, C, D, E, preswap;
		return game.create()
        .then(() => game.onLoad(new Platform.Database("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(A = game.letterBag.getRandomTile());
			human1.rack.addTile(B = game.letterBag.getRandomTile());
			human1.rack.addTile(C = game.letterBag.getRandomTile());
			human1.rack.addTile(D = game.letterBag.getRandomTile());
			human1.rack.addTile(E = game.letterBag.getRandomTile());
			game.addPlayer(human2, true);
		})
		.then(() => game.connect(socket1, human1.key))
    .then(() => preswap = Fridge.thaw(Fridge.freeze(game), Game.classes))
		.then(() => game.swap(human1, [ A, C, E ]))
		.then(() => socket1.wait())
    .then(() => {
      const postswap = Fridge.thaw(Fridge.freeze(game), Game.classes);
      assert.deepEqual(postswap.board, preswap.board);
    })
		.then(() => game.undo())
    .then(() => {
      const postundo = Fridge.thaw(Fridge.freeze(game), Game.classes);
      assert.deepEqual(postundo.board, preswap.board);
      assertGameEqual(postundo, preswap);
    });
	});

	it("unpass", () => {
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});

		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			//_debug: console.debug,
			noPlayerShuffle: true
		});
		const socket = new TestSocket();
		socket.on(Notify.TURN, (turn, event) => socket.done())
		.on(Notify.CONNECTIONS, () => {})
		.on(Notify.RELOAD, () => {})
		.on("*", (data, event) => assert.fail(event));
    let A, B, C, D, E, prepass;
		return game.create()
        .then(() => game.onLoad(new Platform.Database("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(A = game.letterBag.getRandomTile());
			human1.rack.addTile(B = game.letterBag.getRandomTile());
			human1.rack.addTile(C = game.letterBag.getRandomTile());
			human1.rack.addTile(D = game.letterBag.getRandomTile());
			human1.rack.addTile(E = game.letterBag.getRandomTile());
			game.addPlayer(human2, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
    .then(() => prepass = Fridge.thaw(Fridge.freeze(game), Game.classes))
		.then(() => game.pass(human1, Turns.PASSED))
		.then(() => socket.wait())
    .then(() => game.undo())
    .then(() => {
      const postundo = Fridge.thaw(Fridge.freeze(game), Game.classes);
      assertGameEqual(postundo, prepass);
    });
	});

	it("unplay", () => {
		let W = new Tile({letter:"W", score:1, col: 7, row: 7});
		let O = new Tile({letter:"O", score:1, col: 8, row: 7});
		let R = new Tile({letter:"R", score:1, col: 9, row: 7});
		let D = new Tile({letter:"D", score:1, col: 10, row: 7});
		const move = new Move({
			placements: [ W, O, R, D ],
			words: [ { word: "WORD", score: 10 }],
			score: 20
		});

		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const aTile = new Tile({letter:"A", score:1 });

		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			//_debug: console.debug,
			noPlayerShuffle: true
		});
		const socket = new TestSocket();
		socket.on(Notify.TURN, (turn, event) => {
			socket.done();
		})
    .on("*", (data, event) => {});

    let preplay;
		return game.create()
    .then(() => game.onLoad(new Platform.Database("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
      //console.log(`"${game.letterBag.letters().sort().join("")}"`);
			human1.rack.addTile(W = game.letterBag.removeTile({letter:"W"}));
			human1.rack.addTile(O = game.letterBag.removeTile({letter:"O"}));
			human1.rack.addTile(R = game.letterBag.removeTile({letter:"R"}));
			human1.rack.addTile(D = game.letterBag.removeTile({letter:"D"}));
			game.addPlayer(human2, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
    .then(() => preplay = Fridge.thaw(Fridge.freeze(game), Game.classes))
		.then(() => game.play(human1, move))
		.then(() => socket.wait())
    .then(() => game.undo())
		.then(() => {
      const postundo = Fridge.thaw(Fridge.freeze(game), Game.classes);
      assertGameEqual(postundo, preplay);
    });
	});

	it("untakeBack", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			//_debug: console.debug,
			noPlayerShuffle: true
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		let W = new Tile({letter:"W", score:1, col: 7, row: 7});
		let O = new Tile({letter:"O", score:1, col: 8, row: 7});
		let R = new Tile({letter:"R", score:1, col: 9, row: 7});
		let D = new Tile({letter:"D", score:1, col: 10, row: 7});
		const move = new Move({
			placements: [ W, O, R, D ],
			words: [ { word: "WORD", score: 10 }],
			score: 20
		});
		const socket = new TestSocket();
		socket.on(Notify.CONNECTIONS, () => {});
		let turns = 0;
		socket.on(Notify.TURN, (turn, event) => {
			switch (turns++) {
			case 0:
				assert.equal(turn.type, Turns.PLAYED);
					break;
			case 1:
				assert.equal(turn.type, Turns.TOOK_BACK);
				socket.done();
				break;
			default:
				console.error("UNEXPECTED TURN", event, turn);
				assert.fail(turn.type);
			}
		});
		socket.on("*", (turn, event) => {
		});
    let preplay, pretakeback, posttakeback;
		return game.create()
    .then(() => game.onLoad(new Platform.Database("test/temp", "game")))
		.then(() => {
			game.addPlayer(human1);
			human1.rack.addTile(W = game.letterBag.removeTile({letter:"W"}));
			human1.rack.addTile(O = game.letterBag.removeTile({letter:"O"}));
			human1.rack.addTile(R = game.letterBag.removeTile({letter:"R"}));
			human1.rack.addTile(D = game.letterBag.removeTile({letter:"D"}));
			game.addPlayer(human2, true);
		})
		.then(() => game.connect(socket, human1.key))
    .then(() => preplay = Fridge.thaw(Fridge.freeze(game), Game.classes))
		.then(() => game.play(human1, move))
    .then(() => pretakeback = Fridge.thaw(Fridge.freeze(game), Game.classes))
		.then(() => game.takeBack(human1, Turns.TOOK_BACK))
    .then(() => posttakeback = Fridge.thaw(Fridge.freeze(game), Game.classes))
    .then(() => assertGameEqual(posttakeback, preplay, true))
    .then(() => socket.wait())
    .then(() => game.undo())
		.then(() => {
      const postundo = Fridge.thaw(Fridge.freeze(game), Game.classes);
      assertGameEqual(postundo, pretakeback);
    });
	});

  // Unplay an entire game (including a challenge)
	it("undo", () => {
		const db = new Platform.Database("test", "game");
    let game;
		return db.get("finished_game", Game.classes)
		.then(g => game = g)
    .then(() => game.onLoad(new Platform.Database("test/temp", "game")))
    .then(() => {
      //game._debug = console.debug;
      while (game.turns.length > 0)
        game.undo();
    });
	});

  /*
	it("unchallenge", () => {
		// more tests are in Challenges.ut
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			//_debug: console.debug,
			noPlayerShuffle: true
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const socket = new TestSocket();
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
		});
		return game.create()
        .then(() => game.onLoad(new Platform.Database("test/temp", "game")))
		.then(() => {
			game.addPlayer(human1);
			game.addPlayer(human2);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.challenge(human1))
		.then(g => assert.strictEqual(g, game))
		.then(() => socket.wait())
		.then(() => assert.fail("Expected an error"))
		.catch(e => {
			assert.equal(e, "No previous move to challenge");
		});
	});
*/

  /*
	it("anotherGame", () => {
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});

		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			//_debug: console.debug,
			noPlayerShuffle: true
		});
		const socket = new TestSocket();
		socket.on(Notify.NEXT_GAME, (info, event) => {
			//console.debug("anotherGame", info);
			assert.equal(info.gameKey, game.nextGameKey);
			socket.done();
		});
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new Platform.Database("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			game.addPlayer(human2);
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.anotherGame())
		.then(newGame => {
			// no shuffle, so player should be reset to first
			// player
			assert.equal(newGame.whosTurnKey, human1.key);
			assert.equal(newGame.timerType, game.timerType);
			assert.equal(newGame.timeLimit, game.timeLimit);
			assert.equal(newGame.timePenalty, game.timePenalty);
			assert.equal(newGame.edition, game.edition);
			assert.equal(newGame.dictionary, game.dictionary);
			assert.equal(newGame.minutesToPlay, game.minutesToPlay);
			assert.equal(newGame.predictScore, game.predictScore);
			assert.equal(newGame.allowTakeBack, game.allowTakeBack);
			assert.equal(newGame.wordCheck, game.wordCheck);
			assert.equal(newGame.minPlayers, game.minPlayers);
			assert.equal(newGame.maxPlayers, game.maxPlayers);
		})
		.then(() => socket.wait());
	});
  */

});

