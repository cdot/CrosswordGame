/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */

/**
 * Unit tests for Rack
 */
describe("Rack", () => {

	const TS = require("./TestSupport.js");
	before(required => TS.depend(required, {
    	Rack: "game/Rack",
		Tile: "game/Tile",
		Square: "game/Square",
		jQueryUI: "jquery-ui"
    }));

	it("basics", () => {
		let r = new Rack("base", 10);
		assert(r.isEmpty());

        // Add an "A" to the rack. Should go to position 0
		const aTile = new Tile({letter: "A"});
		assert.equal(r.addTile(aTile).col, 0);
		assert(!r.isEmpty());

        // Add a "B" at position 1
		assert.strictEqual(r.addTile(new Tile({letter: "B"})), r.at(1));
		assert.deepEqual(r.letters().sort(), ["A", "B"]);

        // Remove the first tile that looks like "A"
		const t = new Tile({letter: "A"});
		assert.strictEqual(r.removeTile(t), aTile);
		assert.deepEqual(r.letters().sort(), ["B"]);
        assert(!r.at(0).tile);
        assert.equal(r.at(1).tile.col, 1);

        // Place a blank in position 0
        const blank = new Tile({letter:"9",isBlank: true});
		assert.equal(r.addTile(blank).col, 0);
        // Make sure tile was reset
        assert.equal(r.at(0).tile.letter, " ");
		assert.equal(r.addTile(new Tile({letter: "C"})).col, 2);
		assert.equal(r.addTile(new Tile({letter: "D"})).col, 3);
		assert.deepEqual(r.letters().sort(), [" ", "B", "C", "D"]);
        // Make sure a letter tile is found before the blank
		assert.equal(r.findSquare("D").col, 3);
		const before = r.letters();
		assert.deepEqual(before, [" ", "B", "C", "D"]);
		r.shuffle();
        // Find the blank
		assert(r.findSquare("X").tile.isBlank);
		assert.deepEqual(r.letters().sort(), [" ", "B", "C", "D"]);
		assert.deepEqual(r.lettersLeft().sort(), ["B", "C", "D"]);
	});

	it("$ui empty", () => {
		let r = new Rack("base", 2);

		let $act = r.$ui();
		assert($act.hasClass("Rack"));

		let $dact = $("<div></div>").append($act);
		$("body").append($dact);

		let $exp = $('<table class="Rack"><tr><td class="square-_"><div id="base_0"><a></a></div></td><td class="square-_"><div id="base_1"><a></a></div></td></tr></table>');

		let $dexp = $("<div></div>").append($exp);
		$("body").append($dexp);

		assert($act[0].isEqualNode($exp[0]),
			   "\nexpected:" + $dexp.html() + "\n" +
			   "  actual:" + $dact.html());
		$("body").empty();
	});

	it('$ui empty underlay', () => {
		let r = new Rack('base', 2, "Â£");

		let $act = r.$ui();
		assert($act.hasClass("Rack"));

		let $dact = $("<div></div>").append($act);
		$("body").append($dact);

		let $exp = $('<table class="Rack"><tbody><tr><td class="square-_"><div id="base_0"><a></a></div></td><td class="square-_"><div id="base_1"><a></a></div></td></tr></tbody></table>');

		let $dexp = $("<div></div>").append($exp);
		$("body").append($dexp);

		assert($act[0].isEqualNode($exp[0]),
			   "\nexpected:" + $dexp.html() + "\n" +
			   "  actual:" + $dact.html());

		$("body").empty();
	});

	it('$ui tiled', () => {
		let r = new Rack('base', 2);
		r.addTile(new Tile({letter:'S'}), 0, 0);
		r.addTile(new Tile({letter:'Q'}), 0, 0);

		assert.deepEqual(r.letters().sort(), ['Q', 'S']);

		let $act = r.$ui();
		assert($act.hasClass("Rack"));

		let $dact = $("<div></div>").append($act);

		// Must be in the body before refresh or #id's won't be found
		$("body").append($dact);
		r.$refresh();

		let $exp = $('<table class="Rack"><tbody><tr><td class="square-_"><div id="base_0" class="tiled-square temporary ui-draggable ui-draggable-handle"><a><span class="letter">S</span><span class="score">0</span></a></div></td><td class="square-_"><div id="base_1" class="tiled-square temporary ui-draggable ui-draggable-handle"><a><span class="letter">Q</span><span class="score">0</span></a></div></td></tr></tbody></table>');

		let $dexp = $("<div></div>").append($exp);

		assert($act[0].isEqualNode($exp[0]),
			   "\nexpected:" + $dexp.html() + "\n" +
			   "  actual:" + $dact.html());
		$("body").empty();
	});
});

