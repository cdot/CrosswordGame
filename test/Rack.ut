/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */
/*global document:writable*/

requirejs = require('requirejs');
// node.js
const { JSDOM } = require('jsdom');
/* eslint-disable no-global-assign */
document = new JSDOM('<!doctype html><html><body id="working"></body></html>');
/* eslint-enable no-global-assign */
const { window } = document;
global.window = window;
global.document = window.document;
global.navigator = { userAgent: "node.js" };
const jQuery = require('jquery');
global.jQuery = jQuery;
global.$ = jQuery;

requirejs.config({
    baseUrl: `${__dirname}/..`,
	nodeRequire: require,
    paths: {
		"jquery-ui": "node_modules/jquery-ui-dist/jquery-ui",
		game: 'js/game',
		platform: 'js/server/ServerPlatform'
    }
});

/**
 * Unit tests for Rack class
 */
describe("Rack class", () => {
	const deps = [
		{ Rack: 'game/Rack' },
		{ Tile: 'game/Tile' },
		{ Square: "game/Square" },
		{ jQeuryUI: 'jquery-ui' }
	];

	require("@wikimedia/jquery.i18n/src/jquery.i18n");

	const Assert = require("./Assert.js");
	before(required => Assert.depend(required, deps));

	it('construct', () => {
		let r = new Rack('base', 10);
		assert(r.isEmpty());
		const aTile = new Tile({letter: 'A'});
		assert.equal(r.addTile(aTile), 0);
		assert(!r.isEmpty());
		assert.equal(r.addTile(new Tile({letter: 'B'})), 1);
		assert(!r.isEmpty());
		assert.deepEqual(r.letters().sort(), ['A', 'B']);
		const t = new Tile({letter: 'A'});
		assert.strictEqual(r.removeTile(t), aTile);
		assert.deepEqual(r.letters().sort(), ['B']);
		assert.equal(r.addTile(new Tile({letter: ' ', isBlank: true})), 0);
		assert.equal(r.addTile(new Tile({letter: 'D'})), 2);
		assert.equal(r.addTile(new Tile({letter: 'E'})), 3);
		assert.equal(r.findSquare('D').col, 2);
		const before = r.letters();
		r.shuffle();
		// Probably won't be equal, but it might be!
		assert.notDeepEqual(r.letters(), before);
		assert(r.findSquare('X').tile.isBlank);
		assert.deepEqual(r.lettersLeft().sort(), ['B', 'D', 'E']);
	});

	it('$ui empty', () => {
		let r = new Rack('base', 2);

		let $act = r.$ui();
		assert($act.hasClass("Rack"));

		let $dact = $("<div></div>").append($act);
		$("body").append($dact);

		let $exp = $('<table class="Rack"><tr><td class="square-_"><div id="base_0"><a></a></div></td><td class="square-_"><div id="base_1"><a></a></div></td></tr></table>');

		let $dexp = $("<div></div>").append($exp);
		$("body").append($dexp);

		assert($act[0].isEqualNode($exp[0]),
			   "\nexpected:" + $dexp.html() + "\n" +
			   "  actual:" + $dact.html());
		$("body").empty();
	});

	it('$ui empty underlay', () => {
		let r = new Rack('base', 2, "Â£");

		let $act = r.$ui();
		assert($act.hasClass("Rack"));

		let $dact = $("<div></div>").append($act);
		$("body").append($dact);

		let $exp = $('<table class="Rack"><tbody><tr><td class="square-_"><div id="base_0"><a></a></div></td><td class="square-_"><div id="base_1"><a></a></div></td></tr></tbody></table>');

		let $dexp = $("<div></div>").append($exp);
		$("body").append($dexp);

		assert($act[0].isEqualNode($exp[0]),
			   "\nexpected:" + $dexp.html() + "\n" +
			   "  actual:" + $dact.html());

		$("body").empty();
	});

	it('$ui tiled', () => {
		let r = new Rack('base', 2);
		r.addTile(new Tile({letter:'S'}), 0, 0);
		r.addTile(new Tile({letter:'Q'}), 0, 0);

		assert.deepEqual(r.letters().sort(), ['Q', 'S']);

		let $act = r.$ui();
		assert($act.hasClass("Rack"));

		let $dact = $("<div></div>").append($act);

		// Must be iun the body before refresh or #id's won't be found
		$("body").append($dact);
		r.$refresh();

		let $exp = $('<table class="Rack"><tbody><tr><td class="square-_"><div id="base_0" class="tiled-square temporary ui-draggable ui-draggable-handle"><a><span class="letter">S</span><span class="score">0</span></a></div></td><td class="square-_"><div id="base_1" class="tiled-square temporary ui-draggable ui-draggable-handle"><a><span class="letter">Q</span><span class="score">0</span></a></div></td></tr></tbody></table>');

		let $dexp = $("<div></div>").append($exp);

		assert($act[0].isEqualNode($exp[0]),
			   "\nexpected:" + $dexp.html() + "\n" +
			   "  actual:" + $dact.html());
		$("body").empty();
	});
});

