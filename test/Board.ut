/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */
/*global document:writable*/

/**
 * Unit tests for Board class
 */
describe("Board class", () => {

  const TS = require("./TestSupport.js");
  after(() => TS.after());
  before(required => TS.before({
    
      Board: "game/Board",
      Edition: "game/Edition",
      Tile: "game/Tile",
      Square: "game/Square"
    }, required));

  function UNit() {}
  
  it("construct", () => {
    return Edition.load("Test")
    .then(edition => {
      let b = new Board(edition);
      b.parse(
        "|Q| | | | | | | | | | | | | | |\n" +
        "|U| | | | | | | | | | | | | | |\n" +
        "|E| | | | | | | | | | | | | | |\n" +
        "|S|C|I|E|N|C|E| | | | | | | | |\n" +
        "|T| | | | | | | | | | | | | | |\n" +
        "|I| | | | | | | | | | | | | | |\n" +
        "|O|P|I|N|I|O|N| | | | | | | | |\n" +
        "|N| | | | | |O|M| | | | | | | |\n" +
        "| | | | | | | | | | | | | | | |\n" +
        "| | | | | | | | | | | | | | | |\n" +
        "| | | | | | | | | | | | | | | |\n" +
        "| | | | | | | | | | | | | | | |\n" +
        "| | | | | | | | | | | | | | | |\n" +
        "| | | | | | | | | | | | | | | |\n" +
        "| | | | | | | | | | | | | | | |\n", edition);
      b.at(6, 6).unplaceTile();
      b.at(6, 6).placeTile(new Tile({letter: "N", isBlank: true}), true);
      assert.equal(b.stringify(),
                   "|Q| | | | | | | | | |8|\n" +
                   "|U|4| | | | | | | |4| |\n" +
                   "|E| |7| | | | | |7| | |\n" +
                   "|S|C|I|E|N|C|E|3| | | |\n" +
                   "|T| | | |2| |2| | | | |\n" +
                   "|I| | | | |6| | | | | |\n" +
                   "|O|P|I|N|I|O|n| | | | |\n" +
                   "|N| | |3| | |O|M| | | |\n" +
                   "| | |7| | | | | |7| | |\n" +
                   "| |4| | | | | | | |4| |\n" +
                   "|8| | | | | | | | | |8|\n");
      assert.equal(b.squaresUsed(), 22);
    });
  });

  it("touching old", () => {
    return Edition.load("Test")
    .then(edition => {
      let b = new Board(edition);
      for (let r = 0; r < b.rows; r++)
        for (let c = 0; c < b.cols; c++)
          assert(!b.touchingOld(r, c));
      const mr = Math.floor(b.rows / 2);
      const mc = Math.floor(b.cols / 2);
      let sq = b.at(mr, mc);
      let t = new Tile({letter: "?"});
      sq.placeTile(t, true);
      assert.equal(t.row, mr);
      assert.equal(t.col, mc);
      assert(sq.isLocked());

      b.at(0, 0).placeTile(new Tile({letter: "t"}), true);
      b.at(0, b.rows-1).placeTile(new Tile({letter: "T"}), true);
      b.at(b.cols-1, 0).placeTile(new Tile({letter: "b"}), true);
      b.at(b.cols-1, b.rows-1).placeTile(new Tile({letter: "B"}), true);
      //console.log(b);
      for (let r = 0; r < b.rows; r++) {
        for (let c = 0; c < b.cols; c++) {
          if (r == mr && (c == mc-1 || c == mc+1)
              || c == mc && (r == mr-1 || r == mr+1)
              || r == 0 && (c == 1 || c == b.cols-2)
              || c == 0 && (r == 1 || r == b.rows-2)
              || r == b.rows - 1 && (c == 1 || c == b.cols - 2)
              || c == b.cols - 1 && (r == 1 || r == b.cols - 2))
            assert(b.touchingOld(r, c), `${r} ${c}`);
          else
            assert(!b.touchingOld(r, c), `${r} ${c}`);
        }
      }
    });
  });
});
