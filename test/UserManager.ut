/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */

requirejs = require("requirejs");

// All this for i18n
const { JSDOM } = require('jsdom');
/* eslint-disable no-global-assign */
document = new JSDOM('<!doctype html><html><body id="working"></body></html>');
/* eslint-enable no-global-assign */
const { window } = document;
global.window = window;
global.navigator = { userAgent: "node.js" };
const jQuery = require("jquery");
global.$ = jQuery;
global.jQuery = jQuery;
require("@wikimedia/jquery.i18n/src/jquery.i18n");

requirejs.config({
    baseUrl: `${__dirname}/..`,
	nodeRequire: require,
	paths: {
		"jquery-ui": "node_modules/jquery-ui-dist/jquery-ui",
		common: "js/common",
		server: "js/server",
		dawg: "js/dawg",
		game: "js/game",
		platform: "js/server/ServerPlatform"
	}
});

const chai = require("chai");
chai.use(require("chai-http"));
const expect = chai.expect;
const fs = require("fs").promises;

/**
 * Basic unit tests for UserManager class. Only tests Xanado logins.
 */
describe("UserManager class", () => {
	
	const deps = [
		{ Server: "server/Server" },
		{ Platform: "platform" }
	];

	const Assert = require("./Assert.js");
	before(required => Assert.depend(required, deps));

	const assert = chai.assert;

	function unit() {}

	const config = {
		auth: {
			"sessionSecret": "cross words",
			"db_file" : `${__dirname}/passwd.json`
		},
		defaults: {
			edition: "Tiny",
			dictionary: "Oxford_5000",
			theme: "default"
		}
	};

	it("/session when not logged in", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/session")
		.end((err, res) => {
			assert.equal(res.status, 401);
			chai.assert.deepEqual(res.body, ["not-logged-in"]);
			resolve();
		});
	}));

	it("/register - bad username", () => {
		return fs.unlink(config.auth.db_file)
		.catch(e => undefined)
		.then(() => new Promise(resolve => {
			const s = new Server(config);
			chai.request(s.express)
			.post("/register")
			.set('content-type', 'application/x-www-form-urlencoded')
			.send({})
			.end((err, res) => {
				assert.equal(res.status, 500);
				chai.assert.deepEqual(res.body, ["um-bad-user", null]);
				resolve();
			});
		}));
	});

	// Shortcuts for remaining tests.
	// Promise to create a new server and reset DB, resolve to Server.express.
	function reset() {
		const server = new Server(config);
		Platform.LANG_SEARCH_BASE = __dirname;
		return fs.unlink(config.auth.db_file)
		.catch(e => undefined)
		.then(() => server);
	}
	
	// Promise to register user. Resolve to server.
	function register(server, user) {
		return new Promise(resolve => {
			chai.request(server.express)
			.post("/register")
			.set('content-type', 'application/x-www-form-urlencoded')
			.send(user)
			.end((err, res) => {
				assert.equal(res.status, 200);
				Assert.sparseEqual(res.body, {
					name: user.register_username,
					provider: "xanado"
				});
				assert(res.body.key.length > 1);
				assert(!res.body.email);
				resolve(server);
			});
		});
	}
	
	// Promise to login user. Resolve to session_cookie.
	function login(server, user) {
		return new Promise(resolve => {
			chai.request(server.express)
			.post("/login")
			.send(user)
			.end((err, res) => {
				assert.equal(res.status, 200);
				resolve(res.header["set-cookie"]);
			});
		});
	}

	it("/register new username", () => {
		return reset()
		.then(server => new Promise(resolve => { 
			chai.request(server.express)
			.post("/register")
			.set('content-type', 'application/x-www-form-urlencoded')
			.send({register_username: "test_user"})
			.end((err, res) => {
				assert.equal(res.status, 200);
				Assert.sparseEqual(res.body, {
					name: "test_user",
					provider: "xanado"
				});
				assert(res.body.key.length > 1);
				resolve();
			});
		}));
	});

	it("login / logout", () => {
		let server;
		return reset()
		.then(s => server = s)
		.then(() => register(server, {
			register_username: "test_user",
			register_password: "test_pass",
			register_email: "test@email.com"
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/login")
			.send({
				login_username: "test_user",
				login_password: "wrong_pass"
			})
			.end((err, res) => {
				assert.equal(res.status, 401);
				resolve();
			});
		}))
		.then(() => login(server, {
			login_username: "test_user", login_password: "test_pass"
		}))
		.then(session_cookie => {
			assert(session_cookie);
		});
	});

	it("logged in /session-settings and /session", () => {
		let server;
		return reset()
		.then(s => server = s)
		.then(() => register(server, {
			register_username: "test_user",
			register_password: "test_pass",
			register_email: "test@email.com"
		}))
		.then(() => login(server, {
			login_username: "test_user", login_password: "test_pass"
		}))
		.then(session_cookie => new Promise(resolve => {
			chai.request(server.express)
			.get("/session")
			.set('Cookie', session_cookie)
			.end((err, res) => {
				assert.equal(res.status, 200);
				Assert.sparseEqual(res.body, {
					name: "test_user",
					provider: "xanado"
				});
				assert(res.body.key.length > 1);
				resolve(session_cookie);
			});
		}))
		.then(session_cookie => new Promise(resolve => {
			chai.request(server.express)
			.post("/session-settings")
			.set('Cookie', session_cookie)
			.send({sausages: "bratwurst"})
			.end((err, res) => {
				assert.equal(res.status, 200);
				resolve(session_cookie);
			});
		}))
		.then(session_cookie => new Promise(resolve => {
			chai.request(server.express)
			.get("/session")
			.set('Cookie', session_cookie)
			.end((err, res) => {
				assert.equal(res.status, 200);
				Assert.sparseEqual(res.body, {
					name: "test_user",
					provider: "xanado",
					settings: { sausages: "bratwurst" }
				});
				assert(res.body.key.length > 1);
				resolve(session_cookie);
			});
		}));
	});
	
	it("logged in /users", () => {
		let server;
		return reset()
		.then(s => server = s)
		.then(() => register(server, {
				register_username: "test_user",
				register_password: "test_pass",
				register_email: "test@email.com"
			}))
		.then(() => login(server, {
			login_username: "test_user", login_password: "test_pass"
		}))
		.then(session_cookie => {
			return new Promise(resolve => {
				chai.request(server.express)
				.get("/users")
				.set('Cookie', session_cookie)
				.end((err, res) => {
					//console.log(res.body);
					assert.equal(res.status, 200);
					Assert.sparseEqual(res.body, [{
						name: "test_user"
					}]);
					assert(res.body[0].key.length > 1);
					resolve();
				});
			});
		});
	});

	it("/reset-password", () => {
		let server;
		return reset()
		.then(s => server = s)
		.then(() => register(server, {
				register_username: "test_user",
				register_password: "test_pass",
				register_email: "test@email.com"
			}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "test_pass"
		}))
		.then(session_cookie => new Promise(resolve => {
			// server.mail.transport hasn't been configured yet
			assert(!server.config.mail);
			//server._debug = console.debug;
			let token;
			server.config.mail = {
				sender: "unit tests",
				transport: {
					sendMail: function(email) {
						//console.log("Email", email);
						assert.equal(email.from, "unit tests");
						assert.equal(email.to, "test@email.com");
						assert.equal(email.subject, "um-password-reset");
						assert(email.text);
						token = email.text.replace(
							/^.*\/password-reset\/(\w+).*$/, "$1");
						return Promise.resolve();
					}
				}
			};
			chai.request(server.express)
			.post("/reset-password")
			.send({reset_email: "test@email.com"})
			.set('Cookie', session_cookie)
			.end((err, res) => {
				//console.log(res.text, token);
				assert.equal(res.status, 200);
				Assert.sparseEqual(res.body, [
					"um-reset-sent",
					"test_user"
				]);
				assert(token);
				resolve(token);
			});
		}))
		.then(token => new Promise(resolve => {
			chai.request(server.express)
			.get(`/password-reset/${token}`)
			.end((err, res) => {
				// redirect to /
				assert.equal(res.status, 200);
				//assert(res.header["set-cookie"]);
				// The cookie gets set OK, but not here.
				//console.log(res.text);
				resolve();
			});			
		}));
	});

	it("/change-password", () => {
		let server;
		//config.debug_server = true;
		return reset()
		.then(s => server = s)
		.then(() => register(server, {
				register_username: "test_user",
				register_password: "test_pass",
				register_email: "test@email.com"
			}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "test_pass"
		}))
		.then(session_cookie => new Promise(resolve => {
			chai.request(server.express)
			.post("/change-password")
			.send({password: "wtf"})
			.set('Cookie', session_cookie)
			.end((err, res) => {
				assert.equal(res.status, 200);
				Assert.sparseEqual(res.body, [
					"um-pass-changed",
					"test_user"
				]);
				resolve(session_cookie);
			});
		}))
		.then(session_cookie => new Promise(resolve => {
			chai.request(server.express)
			.post("/logout")
			.set('Cookie', session_cookie)
			.end((err, res) => {
				assert.equal(res.status, 200);
				resolve();
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/session")
			.end((err, res) => {
				assert.equal(res.status, 404);
				resolve();
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/login")
			.send({
				login_username: "test_user",
				login_password: "test_pass"
			})
			.end((err, res) => {
				assert.equal(res.status, 401);
				resolve();
			});
		}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "wtf"
		}));
	});
});
