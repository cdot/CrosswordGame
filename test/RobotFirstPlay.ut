/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */

/**
 * Test first play on an empty board.
 */
requirejs = require("requirejs");

requirejs.config({
    baseUrl: `${__dirname}/..`,
    nodeRequire: require,
	paths: {
		common: "js/common",
		game: "js/game",
		dawg: "js/dawg",
		platform: "js/server/ServerPlatform"
	}
});

describe("first plays", () => {
	const deps = [
		{ Edition: "game/Edition" },
		{ Tile: "game/Tile" },
		{ Player: "game/Player" },
		{ Game: "game/Game" },
		{ Rack: "game/Rack" },
		{ findBestPlay: "game/findBestPlay" }
	];

	const Assert = require("./Assert.js");
	before(required => Assert.depend(required, deps));

	it("first play English Scrabble", () => {
		let bestPlay;

		return new Game({edition:"English_Scrabble", dictionary:"Oxford_5000"}).create()
		.then(game => {
			game.addPlayer(new Player({name:"test", key:"anonymous", isRobot:false}));
			return game.loadBoard(
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n");
		})

		.then(game => findBestPlay(
			game, [
					new Tile({letter:"A", isBlank:false, score:1}),
					new Tile({letter:"E", isBlank:false, score:1}),
					new Tile({letter:"I", isBlank:false, score:1}),
					new Tile({letter:"O", isBlank:false, score:1}),
					new Tile({letter:"U", isBlank:false, score:1}),
					new Tile({letter:" ", isBlank:true, score:0}),
					new Tile({letter:" ", isBlank:true, score:0})
				],
			play => {
				//console.debug(play);
				bestPlay = play;
			}))

		.then(() => {
			assert.equal(bestPlay.words[0].word, "AUDIO");
			assert.equal(bestPlay.words[0].score, 10);
			let tile = bestPlay.placements[2];
			assert(tile instanceof Tile);
			assert.equal(tile.letter, "D");
			assert.equal(tile.score, 0);
			assert(tile.isBlank);
		});
	});

	it("first play English WWF", () => {
		let bestPlay;

		return new Game({edition:"English_WWF", dictionary:"Oxford_5000"}).create()
		.then(game => {
			game.addPlayer(new Player({name:"test", key:"slight", isRobot:false}));
			return game.loadBoard(
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n" +
				"| | | | | | | | | | | | | | | |\n");
		})

		.then(game => findBestPlay(
			game, [
					new Tile({letter:"Z", isBlank:false, score:1}),
					new Tile({letter:"E", isBlank:false, score:1}),
					new Tile({letter:"B", isBlank:false, score:1}),
					new Tile({letter:"U", isBlank:false, score:1})
			],
			play => bestPlay = play))

		.then(() => {
			assert.equal(bestPlay.words[0].word, "BE");
			assert.equal(bestPlay.words[0].score, 4);
		});
	});
});

