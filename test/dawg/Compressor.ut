/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */
/*global document:writable*/

/**
 * Unit tests for dictionary compressor
 */
describe("Compressor", () => {

  const TS = require("../TestSupport.js");
  before(required => {
    TS.before({
      fs: "fs", /* global fs */
      Compressor: "dawg/Compressor", /* global Compressor */
      Dictionary: "dawg/Dictionary", /* global Dictionary */
      Platform: "platform" /* global Platform */
    }, required);
  });
  after(() => {
    TS.after();
    fs.promises.unlink(Platform.getFilePath("test/temp/dictionary.dict"))
    .catch(e => {});
  });

  function UNit() {}

  it("compresses", () => {
    const txtfile = Platform.getFilePath("test/data/dictionary.txt");
    const dictfile = Platform.getFilePath("test/temp/dictionary.dict");
    let words = [];
    return Compressor.compress(txtfile, dictfile,
                               () => {}
                               //console.log
                              )
    .then(() => fs.promises.readFile(txtfile))
    .then(data => data.toString().split(/\r?\n/)
          .map(w => w.replace(/\s.*$/, "")) // comments
          .filter(line => line.length > 0)
          .map(w => words.push(w)))
    .then(() => fs.promises.readFile(dictfile))
    .then(data => new Dictionary("test").loadDAWG(data.buffer))
    .then(dic => words.forEach(word => assert(dic.hasWord(word), `${word} missing`)));
  });
});
