/*Copyright (C) 2019-2022 The Xanado Project https://github.com/cdot/Xanado
License MIT. See README.md at the root of this distribution for full copyright
and license information. Author Crawford Currie http://c-dot.co.uk*/
/* eslint-env node, mocha */

/**
 * Unit tests for Dictionary (and inherently, for LetterNode)
 */
describe("Dictionary class", () => {

    /* global fs, Gzip, Platform, Dictionary */
	const TS = require("./TestSupport.js");
	before(required => TS.depend(required, {
    	fs: "fs",
		Gzip: "node-gzip",
		Platform: "platform",
		Dictionary: "dawg/Dictionary"
    }));

    it("loads words", () => {
		let dic = new Dictionary("test");
		dic.addWord('A');
		dic.addWord('ANT');
		dic.addWord('TAN');
		let s = [];
		dic.eachWord(w => s.push(w));
		assert.deepEqual(s, [ 'A', 'ANT', 'TAN' ]);
		dic.addWord('ANT');
		s = [];
		dic.eachWord(w => s.push(w));
		assert.deepEqual(s, [ 'A', 'ANT', 'TAN' ]);
		assert(dic.hasWord('ANT'));
		assert(!dic.hasWord('TNA'));
		dic.addWord('TA');
		const anags = dic.findAnagrams('ANT');
		assert.deepEqual(anags, { A: 'A', ANT: 'ANT', TA: 'TA', TAN: 'TAN' });
		s = [];
		dic.root.eachLongWord("", w => s.push(w));
		assert.deepEqual(s, [ 'ANT', 'TAN' ]);
	});

	it("loads a dictionary", () => {
		return fs.promises.readFile(Platform.getFilePath("test/dictionary.dict"))
		.then(gz => Gzip.ungzip(gz))
		.then(data => new Dictionary("test").loadDAWG(data.buffer))
		.then(dic => {
			assert(dic.hasWord('LAZY'));
			assert(!dic.match("AXE"));
			assert.equal(dic.match("LAZY").letter, 'Y');
		});
	});

	// Load and extend a dictionary with new words
	it("extends a dictionary", () => {
		return fs.promises.readFile(Platform.getFilePath("test/dictionary.dict"))
		.then(gz => Gzip.ungzip(gz))
		.then(data => new Dictionary("test").loadDAWG(data.buffer))
		.then(dic => {
			assert(dic.hasWord("QUICK"));
			assert(!dic.hasWord("AARDVAARK"));
			assert(!dic.hasSequence("VAAR"));

			dic.addWord("AARDVAARK");
			assert(dic.hasSequence("VAAR"));

			dic.addWord("BISON");
			dic.addWord("BISONIC");

			assert(dic.hasWord("BISON"));
			assert(dic.hasWord("BISONIC"));

			assert(dic.hasSequence("VAAR"));

			let s = {};
			dic.root.eachNode(n => { s[n.letter] = true; return false; });
			assert.equal(Object.keys(s).sort().join(""), "B");

			dic.root.eachNode(n => s[n.letter] = true);
			assert.equal(Object.keys(s).sort().join(""),
						 "ABCDEFGHIJKLMNOPQRSTUVWXYZ");

			s = {};
			dic.root.eachNode(n => {
				s[n.letter] = true; return n.letter !== 'F';
			});
			assert.equal(Object.keys(s).sort().join(""),
						 "ABCDFGIKNORSVW");

			s = {};
			dic.root.eachNode(n => {
				s[n.letter] = true; return n.letter !== 'U';
			});
			assert.equal(Object.keys(s).sort().join(""),
						 "ABCDFGIJKNORSUVWX");
		});
	});

	it("builds links", () => {
		let dic = new Dictionary("test");
		dic.addWord('A');
		dic.addWord('ANT');
		dic.addWord('TAN');

		dic.addLinks();

		const s = dic.getSequenceRoots('N');
		assert(s.length === 2);
		assert.equal(s[0].preNodes[0].letter, 'A');
		assert.deepEqual(s[0].preLetters, ['A']);
		assert.equal(s[0].postNodes[0].letter, 'T');
		assert.deepEqual(s[0].postLetters, ['T']);

		assert.equal(s[1].preNodes[0].letter, 'A');
		assert.deepEqual(s[1].preLetters, ['A']);
		assert.equal(s[1].postNodes.length, 0);
		assert.deepEqual(s[1].postLetters.length, 0);
	});

	it("static load dict and white", () => {
		return Dictionary.load("dictionary", Platform.getFilePath("test"))
		.then(dict => {
			assert(dict.hasWord("DOGS")); // dict
			assert(dict.hasWord("WALRUS")); // whitelist
			assert(!dict.hasWord("AARDVAARK")); // neither
		});
	});

	it("static load no dict just white", () => {
		return Dictionary.load("white", Platform.getFilePath("test"))
		.then(dict => {
			assert(!dict.hasWord("DOGS")); // dict
			assert(dict.hasWord("WALRUS")); // whitelist
			assert(!dict.hasWord("AARDVAARK")); // neither
		});
	});

	it("static load dict no white", () => {
		return Dictionary.load("dict", Platform.getFilePath("test"))
		.then(dict => {
			assert(dict.hasWord("DOGS")); // dict
			assert(!dict.hasWord("WALRUS")); // whitelist
			assert(!dict.hasWord("AARDVAARK")); // neither
		});
	});
});
