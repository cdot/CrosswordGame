/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node */

requirejs = require('requirejs');
// node.js
const { JSDOM } = require('jsdom');
/* eslint-disable no-global-assign */
document = new JSDOM('<!doctype html><html><body id="working"></body></html>');
/* eslint-enable no-global-assign */
const { window } = document;
global.window = window;
global.document = window.document;
global.navigator = { userAgent: "node.js" };
const jQuery = require('jquery');
global.jQuery = jQuery;
global.$ = jQuery;

requirejs.config({
    baseUrl: `${__dirname}/..`,
	nodeRequire: require,
	paths: {
		"jquery-ui": "node_modules/jquery-ui-dist/jquery-ui",
		game: 'js/game',
		dawg: 'js/dawg',
		platform: 'js/server/ServerPlatform'
	}
});

/**
 * Basic unit tests for Game class. More tests for Game methods are
 * in Challenges, HumanCommands, RobotPlays and TimedGame.
 */
requirejs([
	'test/TestRunner', 'test/TestSocket',
	'game/Tile', 'game/Player', 'game/Game', 'game/Move', 'game/Turn'
], (
	TestRunner, TestSocket,
	Tile, Player, Game, Move, Turn
) => {
    let tr = new TestRunner('Game tests');
    let assert = tr.assert;

	tr.addTest('construct', () => {
		const p = {
			edition:'English_Scrabble',
			dictionary:'Oxford_5000',
			secondsPerPlay: 60,
			minutesPerPlay: 999, // secondsToPlay should override
			predictScore: true,
			allowTakeBack: true,
			checkDictionary: true,
			minPlayers: 5,
			maxPlayers: 10,
			debug: false
		};
		return new Game(p)
		.create()
		.then(game => {
			assert.equal(game.edition, p.edition);
			assert.equal(game.dictionary, p.dictionary);
			assert.equal(game.secondsPerPlay, 60);
			assert(game.predictScore);
			assert(game.allowTakeBack);
			assert(game.checkDictionary);
			assert.equal(game.minPlayers, 5);
			assert.equal(game.maxPlayers, 10);
			assert.equal(game.state, Game.STATE_WAITING);
		});
	});
	
	tr.addTest('basics', () => {
		const p = {
			edition:'English_Scrabble',
			dictionary:'Oxford_5000',
			minutesPerPlay: 999,
			predictScore: false,
			allowTakeBack: false,
			checkDictionary: false,
			minPlayers: 30,
			maxPlayers: 1,
			debug: false
		};

		return new Game(p)
		.create()
		.then(game => {
			assert.equal(game.edition, p.edition);
			assert.equal(game.dictionary, p.dictionary);
			assert.equal(game.secondsPerPlay, 999*60);
			assert(!game.predictScore);
			assert(!game.allowTakeBack);
			assert(!game.checkDictionary);
			assert.equal(game.minPlayers, 30);
			assert.equal(game.maxPlayers, 0);

			const robot1 = new Player({
				name:'Robot 1', key:"robot1", isRobot: true});
			game.addPlayer(robot1);
			const human2 = new Player({
				name:'human2', key:"human2", isRobot: false});
			game.addPlayer(human2);
			const human3 = new Player({
				name:'human3', key:"human3", isRobot: false});
			game.addPlayer(human3);
			game.whosTurnKey = human2.key;

			human3.rack.empty();
			robot1.score = 1;
			human2.score = 2;
			human3.score = 3;

			let player = game.getPlayer();
			assert.equal(player.key, human2.key);
			player = game.getPlayer(human2.key);
			assert.equal(player.key, human2.key);
			assert.equal(game.nextPlayer().key, human3.key);
			assert.equal(game.previousPlayer().key, robot1.key);
			assert.equal(game.nextPlayer().key, human3.key);
			assert.equal(game.winningScore(), 3);
			assert.equal(game.getPlayerWithNoTiles().key, human3.key);
			assert.equal(game.state, Game.STATE_WAITING);
		});
	});

	tr.addTest('$html', () => {
		const p = {
			edition:'English_Scrabble',
			dictionary:'Oxford_5000',
			minutesPerPlay: 999,
			predictScore: false,
			allowTakeBack: false,
			checkDictionary: false,
			noPlayerShuffle: true,
			debug: false
		};

		const robot1 = new Player(
			{name:'Robot 1', key:"robot1", isRobot: true});
		const human1 = new Player(
			{name:'Human 1', key:"human1", isRobot: false});
		const human2 = new Player(
			{name:'Human 2', key:"human2", isRobot: false});
		const game = new Game(p);

		const socket = new TestSocket();
		return game.create()
		.then(game => {
			game.addPlayer(human1);
			game.addPlayer(robot1);
			game.addPlayer(human2);
			game.whosTurnKey = human1.key;

			const $tab = $('<table class="playerTable"></table>');
			let $tr;
			$tr = human1.$ui(human1, false);
			assert($tr.hasClass('whosTurn'));
			$tab.append($tr);
			$tr = robot1.$ui(human1, false);
			$tab.append($tr);
			assert(!$tr.hasClass('whosTurn'));
			$tr = human2.$ui(human1, false);
			$tab.append($tr);
			assert(!$tr.hasClass('whosTurn'));

			const $act = game.$ui(game.getPlayer());

			//console.debug(`expect: ${$tab.html()}`);
			//console.debug(`actual: ${$act.html()}`);
			assert($act[0].isEqualNode($tab[0]),
				   `expected: ${$tab.html()}\n actual: ${$act.html()}`);
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => {
			game.whosTurnKey = human2.key;
			human1.missNextTurn = true;
			const $tab = $('<table class="playerTable"></table>');
			let $tr;
			$tr = human1.$ui(human2, true);
			$tab.append($tr);
			assert(!$tr.hasClass('whosTurn'));
			$tr = robot1.$ui(human2, false);
			$tab.append($tr);
			assert(!$tr.hasClass('whosTurn'));
			$tr = human2.$ui(human2, false);
			assert($tr.hasClass('whosTurn'));
			$tab.append($tr);

			const $act = game.$ui(game.getPlayer());
			assert($act.find('#playerhuman1 td.player-name')
				   .hasClass('miss-turn'));
			//console.debug(`expect: ${$tab.html()}`);
			//console.debug(`actual: ${$act.html()}`);
			assert($act[0].isEqualNode($tab[0]),
				   `expected: ${$tab.html()}\n actual: ${$act.html()}`);
			game.stopTimers();
		});
	});

	tr.addTest('last move in game', () => {
		const game = new Game({
			edition:'Tiny',
			dictionary:'Oxford_5000',
			noPlayerShuffle: true,
			debug: false
		});
		const human1 = new Player({
			name:'Human 1', key:"human1", isRobot: false});
		const human2 = new Player({
			name:'Human 2', key:"human2", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:'X', isBlank:false, score:1, col: 6, row: 7}),
				new Tile({letter:'W', isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:'O', isBlank:false, score:1, col: 8, row: 7}),
				new Tile({letter:'R', isBlank:false, score:1, col: 9, row: 7}),
				new Tile({letter:'D', isBlank:false, score:1, col: 10, row: 7})
			],
			words: [ { word: 'XWORD', score: 99 }],
			score: 99
		});
		const socket = new TestSocket();
		let turns = [
			{
				event: 'turn',
				data: {
					type: 'move',
					playerKey: human1.key,
					nextToGoKey: human2.key,
					score: move.score,
					words: move.words,
					placements: move.placements
				}
			}
		];
		const handle = (event, data) => {
			const turn = turns.shift();
			assert.sparseEqual(
				{ event: event, data: data}, turn);
			if (turns.length === 0) {
				// Last play should have no replacements, so player rack
				// will now be empty.
				assert(!data.replacements);
				socket.done();
			}
		};
		socket.on('turn', handle);
		socket.on('connections', () => {});
		socket.on('*', (event, data) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
		.then(game => {
			game.addPlayer(human1);
			human1.rack.empty();
			human1.rack.addTile(
				new Tile({letter:'W', isBlank:false, score:1}));
			human1.rack.addTile(
				new Tile({letter:'O', isBlank:false, score:1}));
			human1.rack.addTile(
				new Tile({letter:'R', isBlank:false, score:1}));
			human1.rack.addTile(
				new Tile({letter:'D', isBlank:false, score:1}));
			human1.rack.addTile(
				new Tile({letter:'X', isBlank:false, score:1}));
			game.addPlayer(human2);
			// Empty the bag
			game.letterBag.getRandomTiles(
				game.letterBag.remainingTileCount());
			game.whosTurnKey = human1.key;
			game.noPlayerShuffle = true;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => assert.equal(game.state, Game.STATE_PLAYING))
		.then(() => game.makeMove(human1, move))
		.then(() => socket.wait())
		.then(() => {
			// Make sure play is finished
			assert(human1.rack.isEmpty());
			assert(!human2.rack.isEmpty());
		});
	});

	// Clear missed turn flag set after challenge failed
	tr.addTest('clear missed turn', () => {
		const game = new Game({
			edition:'Tiny',
			dictionary:'Oxford_5000',
			noPlayerShuffle: true,
			debug: false
		});
		const human1 = new Player({
			name: 'Human 1', key: "human1", isRobot: false});
		const human2 = new Player({
			name: 'Human 2', key: "human2", isRobot: false});
		const human3 = new Player({
			name:'Human 3', key:"human3", isRobot: false});
		const socket = new TestSocket();
		socket.on('connections', () => {});
		socket.on('*', (event, data) => {
			if (event === 'turn') {
				assert.equal(data.type, 'passed');
				socket.done();
				return;
			}
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
		.then(game => {
			game.addPlayer(human1);
			game.addPlayer(human2);
			game.addPlayer(human3);
			human2.missNextTurn = true;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => {
			assert.equal(game.whosTurnKey, human1.key);
			assert(human2.missNextTurn);
		})
		.then(() => game.pass(human1, 'passed'))
		.then(() => {
			assert.equal(game.whosTurnKey, human3.key);
			assert(!human3.missNextTurn);
		});
	});

	tr.addTest('verify human play', () => {
		const game = new Game({
			edition:'Tiny',
			dictionary:'Oxford_5000',
			noPlayerShuffle: true,
			rejectBadPlays: true,
			debug: false
		});
		const human1 = new Player({
			name:'Human 1', key:"human1", isRobot: false});
		const human2 = new Player({
			name:'Human 2', key:"human2", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:'X', isBlank:false, score:1, col: 6, row: 7}),
				new Tile({letter:'Y', isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:'Z', isBlank:false, score:1, col: 8, row: 7})
			],
			words: [ { word: 'XYZ', score: 99 }],
			score: 99
		});
		const socket1 = new TestSocket();
		socket1.on('reject', (event, data) => {
			assert.deepEqual(data, {
				playerKey: human1.key,
				words: [ 'XYZ' ] });
			socket1.done();
		});
		socket1.on('connections', () => {});
		socket1.on('*', (event, data) => {
			console.error("Socket 1 UNEXPECTED EVENT", event);
			assert.fail(event);
		});

		const socket2 = new TestSocket();
		socket2.on('connections', () => {});
		socket2.on('*', (event, data) => {
			console.error("Socket 2 UNEXPECTED EVENT", event);
			assert.fail(event);
		});

		return game.create()
		.then(game => {
			game.addPlayer(human1);
			human1.rack.empty();
			human1.rack.addTile(
				new Tile({letter:'X', isBlank:false, score:1}));
			human1.rack.addTile(
				new Tile({letter:'Y', isBlank:false, score:1}));
			human1.rack.addTile(
				new Tile({letter:'Z', isBlank:false, score:1}));

			game.addPlayer(human2);
		})
		.then(() => game.connect(socket1, human1.key))
		.then(() => game.connect(socket2, human2.key))
		.then(() => game.makeMove(human1, move))
		.then(() => socket1.wait());
	});

	tr.run();
});

