/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */

requirejs = require("requirejs");

requirejs.config({
    baseUrl: `${__dirname}/..`,
	nodeRequire: require,
	paths: {
		common: "js/common",
		server: "js/server",
		dawg: "js/dawg",
		game: "js/game",
		platform: "js/server/ServerPlatform"
	}
});

global.$ = {};

const chai = require("chai");
chai.use(require("chai-http"));
const expect = chai.expect;
const fs = require("fs").promises;
const { exec } = require('child_process');

/**
 * Basic unit tests for Server class.
 */
describe("Server", () => {

	const deps = [
		{ TestSocket: "test/TestSocket" },
		{ Server: "server/Server" },
		{ Platform: "platform" }
	];

	const Assert = require("./Assert.js");
	before(required => Assert.depend(required, deps));

	//after(() => Assert.why_is_node_running());
	
	const assert = chai.assert;

	// Promise to create a new server and reset DB, resolve to Server.express.
	function reset(config) {
		const server = new Server(config);
        return Platform.i18n().load("en")
		.then(() => new Promise(resolve => {
			const cmd = `rm -f ${__dirname}/games/*.game`;
			exec(cmd,
				 (err, stdout, stderr) => {
					 if (err)
						 console.debug(cmd, err);
					 resolve();
				 });
		}))
		.then(() => fs.unlink(config.auth.db_file))
		.catch(e => {
			console.debug(e);
			return undefined;
		})
		.then(() => server);
	}
	
	// Promise to register user. Resolve to server.
	function register(server, user) {
		return new Promise(resolve => {
			chai.request(server.express)
			.post("/register")
			.set('content-type', 'application/x-www-form-urlencoded')
			.send(user)
			.end((err, res) => {
				assert.equal(res.status, 200);
				Assert.sparseEqual(res.body, {
					name: user.register_username,
					provider: "xanado"
				});
				assert(res.body.key.length > 1);
				assert(!res.body.email);
				resolve(server);
			});
		});
	}
	
	// Promise to login user. Resolve to session_cookie.
	function login(server, user) {
		return new Promise(resolve => {
			chai.request(server.express)
			.post("/login")
			.send(user)
			.end((err, res) => {
				assert.equal(res.status, 200);
				resolve(res.header["set-cookie"]);
			});
		});
	}

	const config = {
		auth: {
			"sessionSecret": "cross words",
			"db_file" : `${__dirname}/passwd.json`
		},
		defaults: {
			edition: "Tiny",
			dictionary: "Oxford_5000",
			theme: "default"
		},
		games: "test/games"
	};

	function unit() {}

	it("i18n", () => new Promise(resolve => {
        return Platform.i18n().load("qqq")
        .then(() => {
            assert.equal(
                Platform.i18n("Unknown message $1", "X"), "Unknown message X");
            assert.equal(
                Platform.i18n("SWAP"), "Letters underlying the swap rack");
            resolve();
        });
    }));
    
	it("handlers", () => new Promise(resolve => {
		const s = new Server(config);
		const ts = new TestSocket();
		s.attachSocketHandlers(ts);
		resolve();
	}));

	it("/defaults", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/defaults")
		.end((err, res) => {
			assert.equal(res.status, 200);
			assert.deepEqual(res.body, {
				edition: "Tiny",
				dictionary: "Oxford_5000",
				theme: "default",
				canEmail: false
			});
			resolve();
		});
	}));

	it("/simple/all", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/simple/all")
		.end((err, res) => {
			assert.equal(res.status, 200);
			//console.log(res.body);
			resolve();
		});
	}));

	it("/simple/active", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/simple/active")
		.end((err, res) => {
			assert.equal(res.status, 200);
			//console.log(res.body);
			resolve();
		});
	}));

	it("/locales", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/locales")
		.end((err, res) => {
			//console.log(res.body);
			assert(res.body.indexOf('en') >= 0);
			assert(res.body.indexOf('fr') >= 0);
			assert(res.body.indexOf('de') >= 0);
			assert(res.body.indexOf('qqq') >= 0);
			assert.equal(res.status, 200);
			resolve();
		});
	}));

	it("/editions", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/editions")
		.end((err, res) => {
			assert(res.body.indexOf('English_Lexulous') >= 0);
			assert(res.body.indexOf('English_WWF') >= 0);
			assert.equal(res.status, 200);
			resolve();
		});
	}));

	it("/dictionaries", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/dictionaries")
		.end((err, res) => {
			assert(res.body.indexOf('SOWPODS_English') >= 0);
			assert(res.body.indexOf('CSW2019_English') >= 0);
			assert.equal(res.status, 200);
			resolve();
		});
	}));

	it("/themes", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/themes")
		.end((err, res) => {
			assert.equal(res.status, 200);
			assert(res.body.indexOf('default') >= 0);
			resolve();
		});
	}));

	it("/theme", () => new Promise(resolve => {
		let server, cookie, gamekey;
		return reset(config)
		.then(s => server = s)
		.then(() => register(server, {
				register_username: "test_user",
				register_password: "test_pass",
				register_email: "test@email.com"
			}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "test_pass"
		}))
		.then(c => cookie = c)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/session-settings")
			.set('Cookie', cookie)
			.send({theme: "exander77"})
			.end((err, res) => {
				assert.equal(res.status, 200);
				resolve();
			});
		}))
		.then(() => new Promise(resolve => {
		    chai.request(server.express)
		    .get("/theme/games.css")
			.set('Cookie', cookie)
		    .end((err, res) => {
			    //console.log(res.headers);
			    assert.equal(
				    res.headers['content-type'], "text/css; charset=UTF-8");
			    assert.equal(res.status, 200);
			    resolve();
		    });
        }))
        .then(() => resolve());
	}));

	it("/history", () => new Promise(resolve => {
		const s = new Server(config);
		chai.request(s.express)
		.get("/history")
		.end((err, res) => {
			//console.log(res.text);
			assert.equal(res.status, 200);
			resolve();
		});
	}));

	it("/createGame - /join - /addRobot - /game - /leave - /removeRobot - /deleteGame", () => {
		const config = {
			auth: {
				"sessionSecret": "cross words",
				"db_file" : `${__dirname}/passwd.json`
			},
			defaults: {
				edition: "Tiny",
				dictionary: "Oxford_5000",
				theme: "default"
			},
			games: "test/games"
		};
		let server, cookie, gamekey;
		return reset(config)
		.then(s => server = s)
		.then(() => register(server, {
				register_username: "test_user",
				register_password: "test_pass",
				register_email: "test@email.com"
			}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "test_pass"
		}))
		.then(c => cookie = c)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/createGame")
			.set('Cookie', cookie)
			.send({
				edition: "English_Scrabble",
				dictionary:"CSW2019_English"
			})
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(g => gamekey = g)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/join/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/addRobot/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.get(`/game/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/leave/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/removeRobot/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/deleteGame/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}));
	});

	it("/anotherGame", () => {
		const config = {
			auth: {
				"sessionSecret": "cross words",
				"db_file" : `${__dirname}/passwd.json`
			},
			defaults: {
				edition: "Tiny",
				dictionary: "Oxford_5000",
				theme: "default"
			},
			games: "test/games"
		};
		let server, cookie, gamekey;
		return reset(config)
		.then(s => server = s)
		.then(() => register(server, {
				register_username: "test_user",
				register_password: "test_pass",
				register_email: "test@email.com"
			}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "test_pass"
		}))
		.then(c => cookie = c)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/createGame")
			.set('Cookie', cookie)
			.send({
				edition: "English_Scrabble",
				dictionary:"CSW2019_English"
			})
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(g => gamekey = g)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/join/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/addRobot/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/anotherGame/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				assert.notEqual(res.text, gamekey);
				resolve(res.text);
			});
		}));
	});

	it("/command/:command/:gameKey", () => {
		const config = {
			auth: {
				"sessionSecret": "cross words",
				"db_file" : `${__dirname}/passwd.json`
			},
			defaults: {
				edition: "Tiny",
				dictionary: "Oxford_5000",
				theme: "default"
			},
			games: "test/games"
		};
		let server, cookie, gamekey;
		return reset(config)
		.then(s => server = s)
		.then(() => register(server, {
				register_username: "test_user",
				register_password: "test_pass",
				register_email: "test@email.com"
			}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "test_pass"
		}))
		.then(c => cookie = c)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/createGame")
			.set('Cookie', cookie)
			.send({
				edition: "English_Scrabble",
				dictionary:"CSW2019_English"
			})
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(g => gamekey = g)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/join/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/addRobot/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/command/confirmGameOver/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve();
			});
		}));
	});

	it("/invitePlayers", () => new Promise(done => {
		let server, cookie, gamekey, playerkey;
		return reset(config)
		.then(s => server = s)
		.then(() => register(server, {
	        register_username: "no_email_user"
		}))
		.then(() => register(server, {
				register_username: "test_user",
				register_password: "test_pass",
				register_email: "test@email.com"
			}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "test_pass"
		}))
		.then(c => cookie = c)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.get("/session")
			.set('Cookie', cookie)
			.end((err, res) => {
				assert.equal(res.status, 200);
				playerkey = res.body.key;
				resolve();
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/createGame")
			.set('Cookie', cookie)
			.send({
				edition: "English_Scrabble",
				dictionary:"CSW2019_English"
			})
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(g => gamekey = g)
		.then(() => new Promise(resolve => {
			// server.mail.transport hasn't been configured yet
			assert(!server.config.mail);
			//server._debug = console.debug;
			let token;
			server.config.mail = {
				sender: "unit tests",
				transport: {
					sendMail: function(email) {
                        //console.log(email);
						assert.equal(email.from, "test_user<test@email.com>");
						assert(email.to === "test@email.com"
                               || email.to === "user@email.com");
						assert.equal(email.subject,
                                     "You have been invited to play XANADO");
						assert(email.text);
                        assert(email.text.indexOf("Hollow Wurld") >= 0);
                        assert(email.text.indexOf(`/html/games.html?untwist=${gamekey}`) >= 0);
						return Promise.resolve();
					}
				}
			};
			chai.request(server.express)
			.post(`/invitePlayers/${gamekey}`)
			.send({player: [
                { key: playerkey },
                { name: "no_email_user" },
                { email: "user@email.com" }
            ], message: "Hollow Wurld"})
			.set('Cookie', cookie)
			.end((err, res) => {
                //console.log(res.body);
				assert.deepEqual(res.body, [
                    "test_user",
                    "(no_email_user has no email address)",
                    "user@email.com"
                ]);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(() => done());
	}));

	it("/sendReminder", () => new Promise(done => {
		let server, cookie, gamekey, playerkey;
		return reset(config)
		.then(s => server = s)
		.then(() => register(server, {
			register_username: "test_user",
			register_password: "test_pass",
			register_email: "test@email.com"
		}))
		.then(() => login(server, {
			login_username: "test_user",
			login_password: "test_pass"
		}))
		.then(c => cookie = c)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.get("/session")
			.set('Cookie', cookie)
			.end((err, res) => {
				assert.equal(res.status, 200);
				playerkey = res.body.key;
				resolve();
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post("/createGame")
			.set('Cookie', cookie)
			.send({
				edition: "English_Scrabble",
				dictionary:"CSW2019_English"
			})
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(g => gamekey = g)
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/join/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			chai.request(server.express)
			.post(`/addRobot/${gamekey}`)
			.set('Cookie', cookie)
			.end((err, res) => {
				//console.log(res.text);
				assert.equal(res.status, 200, res.text);
				resolve(res.text);
			});
		}))
		.then(() => new Promise(resolve => {
			// server.mail.transport hasn't been configured yet
			//server._debug = console.debug;
			let token;
			server.config.mail = {
				sender: "unit tests",
				transport: {
					sendMail: function(email) {
						assert.equal(email.from, "test_user<test@email.com>");
						assert.equal(email.to, "test@email.com");
						assert.equal(email.subject, "It is your turn in your XANADO game");
						assert(email.text);
						return Promise.resolve();
					}
				}
			};
			//server._debug = console.debug;
			// Because we haven't gone though playIfReady yet, the players
			// will still be in the order they were added i.e. human first
			chai.request(server.express)
			.post(`/sendReminder/${gamekey}`)
			.send()
			.set('Cookie', cookie)
			.end((err, res) => {
				assert.deepEqual(res.body, ['test_user']);
				assert.equal(res.status, 200);
				resolve(res.text);
			});
		}))
		.then(() => done());
	}));

});
