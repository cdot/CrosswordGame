/* See README.md at the root of this distribution for copyright and
   license information */
/* eslint-env node, mocha */

/**
 * Unit tests for correct handling of challenges at various stages of
 * the game.
 */
describe("Challenges", () => {

	const TS = require("./TestSupport.js");
	before(required => TS.depend(required,           {
    FileDatabase: "server/FileDatabase",
		Tile: "game/Tile",
		Player: "game/Player",
		Game: "game/Game",
		Move: "game/Move",
		Turn: "game/Turn",
		Types: "game/Types"
    }));
	
	it("bad challenge by next player - miss turn", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const move1 = new Move({
			words: [ { word: "SINK", score: 99 }],
			score: 99
		});
		move1.addPlacement(
            new Tile({letter:"S", isBlank:false, score:1, col: 7, row: 7}));
		move1.addPlacement(
            new Tile({letter:"I", isBlank:false, score:1, col: 8, row: 7}));
		move1.addPlacement(
            new Tile({letter:"N", isBlank:false, score:1, col: 9, row: 7}));
		move1.addPlacement(
            new Tile({letter:"K", isBlank:false, score:1, col: 10, row: 7}));
		const socket = new TestSocket();
		let turns = 0;
		socket.on(Notify.TURN, turn => {
			if (turns++ === 0) {
				// Human"s move
				assert.equal(turn.type, Turns.PLAYED);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);

				assert.equal(game.whosTurnKey, human2.key);
			} else {
				assert.equal(turn.type, Turns.CHALLENGE_LOST);
				assert.equal(turn.score, 0);
				assert.equal(turn.playerKey, human1.key); // who was challenged
				assert.equal(turn.challengerKey, human2.key); // who issued the challenged
				assert.equal(turn.nextToGoKey, human1.key);

				// The challenge failed, and they are forced to pass, but that doesn"t
				// mean they miss the next turn after this one.
				assert(!human2.missNextTurn);

				socket.done();
			}
		});
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});

		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(() => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"S"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"I"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"N"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"K"}));
			game.addPlayer(human2, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move1))
		.then(() => game.challenge(human2, human1))
		.then(() => socket.wait())
		.then(() => {
			assert.equal(game.whosTurnKey, human1.key);
		});
	});

	it("bad challenge by next player - points penalty", () => {
		// Implicitly tests pass
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.PER_TURN,
			penaltyPoints: 5
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const move1 = new Move({
			placements: [
				new Tile({letter:"S", score:1, col: 7, row: 7}),
				new Tile({letter:"I", score:1, col: 8, row: 7}),
				new Tile({letter:"N", score:1, col: 9, row: 7}),
				new Tile({letter:"K", score:1, col: 10, row: 7}),
				new Tile({letter:"E", score:1, col: 7, row: 8}),
				new Tile({letter:"T", isBlank: true, score:0, col:7, row:9})
			],
			words: [ { word: "SINK", score: 4 }, { word: "SET", score: 2 }],
			score: 99
		});
		const socket = new TestSocket();
		let turns = 0;
		const handle = (turn, event) => {
			switch (turns++) {
			case 0: // Human"s move
				assert.equal(turn.type, Turns.PLAYED);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(game.whosTurnKey, human2.key);
				break;

			case 1: // challenge failed
				assert.equal(game.whosTurnKey, human2.key);
				assert.equal(turn.type, Turns.CHALLENGE_LOST);
				assert.equal(turn.score, -5);
				assert.equal(turn.playerKey, human1.key); // who was challenged
				assert.equal(turn.challengerKey, human2.key); // who issued the challenged
				assert.equal(turn.nextToGoKey, human2.key);
				assert(!human2.missNextTurn);
				socket.done();
				break;
			default:
				console.error("UNEXPECTED TURN", turn);
			}
		};
		socket.on(Notify.TURN, handle);
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"S"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"I"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"N"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"K"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"E"}));
			human1.rack.addTile(game.letterBag.removeTile({isBlank:true}));
			game.addPlayer(human2, true);
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move1))
		.then(() => game.challenge(human2, human1))
		.then(() => socket.wait())
		.then(() => {
			assert.equal(game.whosTurnKey, human2.key);
		});
	});

	it("bad challenge by not-next player - points penalty", () => {
		// Implicitly tests pass
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.PER_WORD,
			penaltyPoints: 100
		});
		const human1 = new Player({name: "Human 1", key: "human1"});
		const human2 = new Player({name: "Human 2", key: "human2"});
		const human3 = new Player({name:"Human 3", key:"human3"});
		const move = new Move({
			placements: [
				new Tile({letter:"S", score:1, col: 7, row: 7}),
				new Tile({letter:"I", score:1, col: 8, row: 7}),
				new Tile({letter:"N", score:1, col: 9, row: 7}),
				new Tile({letter:"K", score:1, col: 10, row: 7}),
				new Tile({letter:"E", score:1, col: 7, row: 8}),
				new Tile({letter:"T", isBlank: true, score:0, col: 7, row: 10})
			],
			words: [ { word: "SINK", score: 4 }, { word: "SET", score: 2 }],
			score: 12
		});
		const socket = new TestSocket();
		let turns = 0;
		const handle = (turn, event) => {
			switch (turns++) {
			case 0:
				// Human"s move
				assert.equal(turn.type, Turns.PLAYED);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(game.whosTurnKey, human2.key);
				break;
			case 1:
				//console.debug("bad challenge by not-next player", turn);
				assert.equal(turn.type, Turns.CHALLENGE_LOST);
				assert.equal(turn.score, -200);
				assert.equal(turn.challengerKey, human3.key); // who challenged them
				assert.equal(turn.playerKey, human1.key); // who was challenged
				assert(!human3.missNextTurn);
				socket.done();
			}
		};
		socket.on(Notify.TURN, handle);
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"S"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"I"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"N"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"K"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"E"}));
			human1.rack.addTile(game.letterBag.removeTile({isBlank:true}));
			game.addPlayer(human2, true);
			game.addPlayer(human3, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		.then(() => game.challenge(human3, human1))
		.then(() => {
			assert.equal(game.whosTurnKey, human2.key);
			assert.equal(game.getPlayer().key, human2.key);
		});
	});

	it("bad challenge by not-next player - miss turn", () => {
		// Implicitly tests pass
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
						//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({name: "Human 2", key: "human2", isRobot: false});
		const human3 = new Player({name:"test3", key:"three", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:"S", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"I", isBlank:false, score:1, col: 8, row: 7}),
				new Tile({letter:"N", isBlank:false, score:1, col: 9, row: 7}),
				new Tile({letter:"K", isBlank:false, score:1, col: 10, row: 7})
			],
			words: [ { word: "SINK", score: 99 }],
			score: 99
		});
		const socket = new TestSocket();
		let turns = 0;
		const handle = (turn, event) => {
			if (turns++ === 0) {
				// Human"s move
				assert.equal(turn.type, Turns.PLAYED);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(game.whosTurnKey, human2.key);
			} else {
				//console.debug("bad challenge by not-next player", turn);
				assert.equal(turn.type, Turns.CHALLENGE_LOST);
				assert.equal(turn.score, 0);
				assert.equal(turn.challengerKey, human3.key); // who challenged them
				assert.equal(turn.playerKey, human1.key); // who was challenged
				assert(human3.missNextTurn);
				socket.done();
			}
		};
		socket.on(Notify.TURN, handle);
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"S"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"I"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"N"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"K"}));
			game.addPlayer(human2, true);
			game.addPlayer(human3, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		.then(() => game.challenge(human3, human1))
		.then(() => {
			assert.equal(game.whosTurnKey, human2.key);
			assert.equal(game.getPlayer().key, human2.key);
		});
	});

	it("good challenge by next player", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:"X", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"Y", isBlank:false, score:1, col: 8, row: 7}),
				new Tile({letter:"Z", isBlank:false, score:1, col: 9, row: 7}),
				new Tile({letter:"J", isBlank:false, score:1, col: 10, row: 7}) ],
			words: [ { word: "XYZZ", score: 99 }],
			score: 99
		});
		const socket = new TestSocket();
		let turns = 0;
		const handle = (turn, event) => {
			if (turns++ === 0) {
				// Human"s move
				assert.equal(turn.type, Turns.PLAYED);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(game.whosTurnKey, human2.key);
			} else {
				//console.debug("good challenge by next player", turn);
				assert.equal(turn.type, Turns.CHALLENGE_WON);
				assert.equal(turn.challengerKey, human2.key);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(turn.score, -99);
				socket.done();
			}
		};
		socket.on(Notify.TURN, handle);
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(() => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"X"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Y"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Z"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Q"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"J"}));
			game.addPlayer(human2, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		.then(() => game.challenge(human2, human1))
		.then(() => socket.wait())
		.then(() => {
			assert(!human1.missNextTurn);
			assert(!human2.missNextTurn);
		});
	});

	it("good challenge by not-next player", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.PER_WORD,
			penaltyPoints: 6
		});
		const human1 = new Player({name: "Human 1", key: "human1"});
		const human2 = new Player({name: "Human 2", key: "human2"});
		const human3 = new Player({name:"Human 3", key:"human3"});
		const move = new Move({
			placements: [
				new Tile({letter:"S", score:1, col: 7, row: 7}),
				new Tile({letter:"P", score:1, col: 8, row: 7}),
				new Tile({letter:"N", score:1, col: 9, row: 7}),
				new Tile({letter:"K", score:1, col: 10, row: 7}),
				new Tile({letter:"T", score:1, col: 7, row: 8}),
				new Tile({letter:"T", isBlank: true, score:0, col: 7, row: 10})
			],
			words: [ { word: "SPNK", score: 4 }, { word: "SPT", score: 2 }],
			score: 99
		});
		const socket = new TestSocket();
		let turns = 0;
		const handle = (turn, event) => {
			switch (turns++) {
			case 0:
				// Human"s move
				assert.equal(turn.type, Turns.PLAYED);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(game.whosTurnKey, human2.key);
				break;
			case 1:
				//console.debug("good challenge by not-next player", turn);
				assert.equal(turn.type, Turns.CHALLENGE_WON);
				assert.equal(turn.score, -99);
				assert.equal(turn.challengerKey, human3.key); // who challenged them
				assert.equal(turn.playerKey, human1.key); // who was challenged
				assert(!human1.missNextTurn);
				assert(!human2.missNextTurn);
				assert(!human3.missNextTurn);
				socket.done();
			}
		};
		socket.on(Notify.TURN, handle);
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"S"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"P"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"N"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"K"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"T"}));
			human1.rack.addTile(game.letterBag.removeTile({isBlank:true}));
			game.addPlayer(human2, true);
			game.addPlayer(human3, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		.then(() => {
			assert.equal(game.whosTurnKey, human2.key);
			assert.equal(game.getPlayer().key, human2.key);
		})
		.then(() => game.challenge(human3, human1))
		.then(() => {
			assert.equal(game.whosTurnKey, human2.key);
			assert.equal(game.getPlayer().key, human2.key);
		});
	});

	it("challenge by same player", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:"X", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"Y", isBlank:false, score:1, col: 8, row: 7}),
				new Tile({letter:"Z", isBlank:false, score:1, col: 9, row: 7}),
				new Tile({letter:"Q", isBlank:false, score:1, col: 10, row: 7})
			],
			words: [ { word: "XYZZ", score: 99 }],
			score: 99
		});
		const socket = new TestSocket();
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			if (event === Notify.TURN) {
				socket.done();
				return;
			}
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(() => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"X"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Y"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Z"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Q"}));
			game.addPlayer(human2, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		.then(() => game.challenge(human1, human1))
		.then(() => socket.wait())
		.then(() => assert.fail("Expected an error"))
		.catch(e => {
			assert.equal(e, "Cannot challenge your own play");
		});
	});

	it("good challenge of final play by next player", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({name: "Human 1", key:"sheep", isRobot: false});
		const human2 = new Player({name: "Human 2", key:"wolf", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:"X", isBlank:false, score:1, col: 6, row: 7}),
				new Tile({letter:"Y", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"Z", isBlank:false, score:1, col: 8, row: 7}),
			],
			words: [ { word: "XYZ", score: 3 }],
			score: 3
		});

		const socket = new TestSocket();
		socket.on(Notify.CONNECTIONS, () => {});
		let turns = 0;
		socket.on(Notify.TURN, (turn, event) => {
			if (turns++ == 0) {
				assert.equal(turn.type, Turns.PLAYED);
				TS.sparseEqual(turn, move);
			} else {
				//console.debug("good challenge of final play", turn);
				assert.equal(turn.type, Turns.CHALLENGE_WON);
				assert.equal(turn.challengerKey, human2.key);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(turn.score, -3);
				assert(!turn.emptyPlayerKey);
				socket.done();
			}
		});
		socket.on("*", (turn, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"X"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Y"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Z"}));
			game.addPlayer(human2, true);
			game.whosTurnKey = human1.key;

			// Empty the bag
			game.letterBag.getRandomTiles(
				game.letterBag.remainingTileCount());
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		// Player 1 has played, so issue a challenge on behalf of player 2
		.then(() => game.challenge(human2, human1))
		.then(() => socket.wait());
	});

	it("good challenge of final play by not-next player", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const human3 = new Player({
			name: "Human 3", key: "human3", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:"P", isBlank:false, score:1, col: 6, row: 7}),
				new Tile({letter:"Q", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"T", isBlank:false, score:1, col: 8, row: 7}),
			],
			words: [ { word: "PQT", score: 3 }],
			score: 3
		});
		const socket = new TestSocket();
		socket.on(Notify.CONNECTIONS, () => {});
		let turns = 0;
		socket.on(Notify.TURN, (turn, event) => {
			switch (turns++) {
			case 0:
				assert.equal(turn.words.length, 1);
				assert.deepEqual(turn.words[0], { word: "PQT", score: 3 });
				assert.equal(turn.score, 3);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				break;
			case 1:
				//console.debug("good challenge of final play by not-next", turn);
				assert.equal(turn.type, Turns.CHALLENGE_WON);
				assert.deepEqual(turn.score, -3);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.challengerKey, human3.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert(!turn.emptyPlayerKey);
				socket.done();
				break;
			default:
				assert.fail("UNEXPECTED TURN" + turn);
			}
		});
		socket.on("*", (turn, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});

		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"P"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"Q"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"T"}));

			game.addPlayer(human2);
			human2.rack.addTile(game.letterBag.removeTile({letter:"J"}));

			// Empty the bag
			game.letterBag.getRandomTiles(
				game.letterBag.remainingTileCount());
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		// Player 1 has played and "won",
		// so issue a challenge on behalf of player 3
		.then(() => game.challenge(human3, human1))
		.then(() => socket.wait())
		.then(() => {
			assert.equal(game.whosTurnKey, human2.key);
			assert(!human1.missNextTurn);
			assert(!human2.missNextTurn);
			assert(!human3.missNextTurn);
		});
	});

	// A bad challenge of the final play by the next player is treated
	// as a Turns.GAME_ENDED with appropriate end state.
	it("bad challenge of final play by next player - miss turn", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:"A", isBlank:false, score:1, col: 6, row: 7}),
				new Tile({letter:"R", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"T", isBlank:false, score:1, col: 8, row: 7}),
			],
			words: [ { word: "ART", score: 3 }],
			score: 3
		});
		const socket = new TestSocket();
		socket.on(Notify.CONNECTIONS, () => {});
		let turns = 0;
		socket.on(Notify.TURN, (turn, event) => {
			if (turns++ == 0) {
				assert.equal(turn.words.length, 1);
				assert.deepEqual(turn.words[0], { word: "ART", score: 3 });
				assert.equal(turn.score, 3);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
			} else {
				//console.debug("bad challenge of final play", turn);
				assert.equal(turn.type, Turns.GAME_ENDED);
				assert.equal(turn.endState, State.FAILED_CHALLENGE);
				assert.deepEqual(turn.score, {
					human1: {tiles: 4 }, human2: {tiles: -4}});
				assert.equal(turn.playerKey, human2.key);
				assert.equal(turn.nextToGoKey, undefined);
				// Still empty!
				assert.equal(turn.emptyPlayerKey, human1.key);
				// Game should be over
				socket.done();
			}
		});
		socket.on("*", (turn, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});

		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"A"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"R"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"T"}));

			game.addPlayer(human2);			
			human2.rack.addTile(game.letterBag.removeTile({letter:"Q"}));

			game.whosTurnKey = human1.key;
			// Empty the bag
			game.letterBag.getRandomTiles(
				game.letterBag.remainingTileCount());
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		// Player 1 has played, so issue a challenge on behalf of player 2
		.then(() => game.challenge(human2, human1))
		.then(() => socket.wait());
	});

	// If the bad challenge is from a not-next player,
	// it should generate a turn{type=Turns.CHALLENGE_LOST}.
	it("bad challenge of final play by not-next player - miss turn", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const human3 = new Player({
			name: "Human 3", key: "human3", isRobot: false});
		const move = new Move({
			placements: [
				new Tile({letter:"A", isBlank:false, score:1, col: 6, row: 7}),
				new Tile({letter:"R", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"T", isBlank:false, score:1, col: 8, row: 7}),
			],
			words: [ { word: "ART", score: 3 }],
			score: 3
		});
		const socket = new TestSocket();
		socket.on(Notify.CONNECTIONS, () => {});
		let turns = 0;
		socket.on(Notify.TURN, (turn, event) => {
			switch (turns++) {
			case 0:
				assert.equal(turn.words.length, 1);
				assert.deepEqual(turn.words[0], { word: "ART", score: 3 });
				assert.equal(turn.score, 3);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				break;
			case 1:
				//console.debug("bad challenge of final play by not-next", turn);
				assert.equal(turn.type, Turns.CHALLENGE_LOST);
				// a failed challenge by not-next incurs no penalty under
				// default rules.
				assert.deepEqual(turn.score, 0);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.challengerKey, human3.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(turn.emptyPlayerKey, human1.key);
				socket.done();
				break;
			default:
				assert.fail("UNEXPECTED TURN" + turn);
			}
		});
		socket.on("*", (turn, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});

		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(game => {
			game.addPlayer(human1);
			human1.rack.addTile(game.letterBag.removeTile({letter:"A"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"R"}));
			human1.rack.addTile(game.letterBag.removeTile({letter:"T"}));

			game.addPlayer(human2);			
			human2.rack.addTile(game.letterBag.removeTile({letter:"Q"}));

			// Empty the bag
			game.letterBag.getRandomTiles(
				game.letterBag.remainingTileCount());
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move))
		// Player 1 has played, so issue a challenge on behalf of player 3
		.then(() => game.challenge(human3, human1))
		.then(() => socket.wait());
	});

	/**
	 * player 1 played not-final play
	 * player 2 challenged - good challenge
	 * player 2 passed
	 * player 1 tried to make a play - blew up with "Cannot find on Rack"
	 */
	it("play, challenge, swap", () => {
		const game = new Game({
			edition:"Test",
			dictionary:"Oxford_5000",
			noPlayerShuffle: true,
			//_debug: console.debug,
			challengePenalty: Penalty.MISS
		});
		const human1 = new Player({
			name: "Human 1", key: "human1", isRobot: false});
		const human2 = new Player({
			name: "Human 2", key: "human2", isRobot: false});
		const move1 = new Move({
			placements: [
				new Tile({letter:"Q", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"Y", isBlank:false, score:1, col: 8, row: 7}),
				new Tile({letter:"Z", isBlank:false, score:1, col: 9, row: 7}),
				new Tile({letter:"F", isBlank:false, score:1, col: 10, row: 7}) ],
			words: [ { word: "QYZF", score: 1 }],
			score: 1
		});
		const move2 = new Move({
			placements: [
				new Tile({letter:"F", isBlank:false, score:1, col: 7, row: 7}),
				new Tile({letter:"Z", isBlank:false, score:1, col: 8, row: 7}),
				new Tile({letter:"Y", isBlank:false, score:1, col: 9, row: 7}),
				new Tile({letter:"Q", isBlank:false, score:1, col: 10, row: 7}) ],
			words: [ { word: "FZYQ", score: 99 }],
			score: 99
		});
		const socket = new TestSocket();
		let turns = 0;
		const handle = (turn, event) => {
			switch (turns++) {
			case 0:
				assert.equal(turn.type, Turns.PLAYED);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(turn.score, move1.score);
				assert.equal(game.whosTurnKey, human2.key);
				break;
			case 1:
				assert.equal(turn.type, Turns.CHALLENGE_WON);
				assert.equal(turn.challengerKey, human2.key);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(turn.score, -move1.score);
				break;
			case 2:
				assert.equal(turn.type, Turns.PASSED);
				assert.equal(turn.playerKey, human2.key);
				assert.equal(turn.nextToGoKey, human1.key);
				assert.equal(turn.score, 0);
				break;
			case 3:
				assert.equal(turn.type, Turns.PLAYED);
				assert.equal(turn.playerKey, human1.key);
				assert.equal(turn.nextToGoKey, human2.key);
				assert.equal(turn.score, move2.score);
				socket.done();
				break;
			default:
				console.error("UNEXPECTED TURN", event, turn);
				assert.fail("Unexpected turn");
			}
		};
		socket.on(Notify.TURN, handle);
		socket.on(Notify.CONNECTIONS, () => {});
		socket.on("*", (data, event) => {
			console.error("UNEXPECTED EVENT", event);
			assert.fail(event);
		});
		return game.create()
        .then(() => game.onLoad(new FileDatabase("test/temp", "game")))
		.then(() => {
			game.addPlayer(human1);
			for (let tile of move1.placements)
				human1.rack.addTile(game.letterBag.removeTile(tile));
			game.addPlayer(human2, true);
			game.whosTurnKey = human1.key;
		})
		.then(() => game.connect(socket, human1.key))
		.then(() => game.play(human1, move1))
		.then(() => game.challenge(human2, human1)) // should succeed
		.then(() => game.pass(human2, Turns.PASSED))
		.then(() => game.play(human1, move2))
		.then(() => socket.wait())
		.then(() => {
			assert(!human1.missNextTurn);
			assert(!human2.missNextTurn);
		});
	});
});
